% Copyright 2022 Douglas Myers-Turnbull
% This work may be distributed and/or modified under the conditions of the LaTeX Project Public
% License, either version 1.3 of this license or (at your option) any later version. The latest
% version of this license is in http://www.latex-project.org/lppl.txt and version 1.3 or later is
% part of all distributions of LaTeX version 2005/12/01 or later.
%==================================================================================================


%=======                                                   =======
%=======                      Pidgin                       =======
%=======                                                   =======

\NeedsTeXFormat{LaTeX2e}[2020-10-01]
\ExplSyntaxOn
\ProvidesExplPackage {pidgin} {2022-07-04} {0.1.0}
    { Pidgin:~tools~for~language-aware~packages }

\cs_generate_variant:Nn \text_lowercase:nn { Vn }
\cs_generate_variant:Nn \text_uppercase:nn { Vn }
\cs_generate_variant:Nn \text_titlecase:nn { Vn }
\cs_generate_variant:Nn \text_titlecase_first:nn { Vn }

% Okay, some language notes:
% Some language-aware (or region-aware) packages use tracklang or iflang
% to determine the language (either from Babel or Polyglossia).
% Other packages pick up documentclass-level options like USenglish
% Mainly for technical reasons (class has to be loaded before options can be declared),
% we're not doing this. Cleveref is one of those.
% This means we must pass the language directly to those packages.
% Complicating things, cleveref doesn't know what USenglish is,
% or for that matter, en-us. It just wants 'English'.
% We'll get the base language using Babel's `baselanguage`.

% nomencl wants one of these:
% catalan, croatian, danish, english, french, german, italian, norwegianbokmaal,
% norwegian-nynorsk, polish, portuguese, russian, slovene, spanish, ukrainian
% Instead, we'll ignore these options and deal with nomencl separately

% Uppercase first character and each first character after punctuation; lowercase the rest
% E.g. "\txtsentencecase{grab a RED one}" --> Grab A Red One
% The starred variant leaves intra-word casing as-is
% the L3 kernel macros are badly named
% Case-switching is language-specific; Unicode provides language-specific rules.
% We'll use \textile_lowercase:n instead of L3's \text_lowercase:n (e.g.).
% \textlowercase is just \text_lowercase:nn {#1} {\g_pidgin_bcp_str}.
% We tell pidgin about our preferred language (e.g. 'en-us').
% TODO: this?
%\exp_args:Ne
%    \pidgin_set_case_lang:n
%    {\CurrentTrackedLanguageTag}
% TODO: update textile's language on every language switch
%\AddBabelHook {casing} {patterns}
%    { \pidgin_set_case_lang:V \languagename }

% For cref, things get weird again.
% Babel contains 'captions' for each language.
% E.g. "List of figures" for English.
% Cleveref has a built-in massive list of names for things,
% such as "Figure" or "Fig.". (These are selected by package options.)
% We'll need to set new (or replace existing) cleveref names
% wrapped inside Babel's \addto\captionsUSenglish { ... }
% We take the values provided to \SetCrefStrings to be
% case-insensitive, because we'll set both \Crefname and \crefname.

% Now there are other mechanisms to set strings.
% 1. ~~Cleveref~~ (DONE.)
% 2. Biblatex's \DefineBibliographyStrings
% 3. Babel's \setlocalecaption
% Of these, we'll abuse the 3rd to set our own pidgin-specific strings.
% In contrast to #1, #2 and #3 are case-sensitive.
% It is generally expected that these strings will be rendered as-is.

% Babel's \bbl@captionslist is:
% preface, ref, abstract, bib, chapter, appendix ,
% contents, listfigure, listtable, index,
% figure, table, part, encl, cc, headto, page ,
% see, also, proof, glossary ,

\msg_new:nnn {pidgin} {generic}
    {#1:~#2}

\cs_new_protected:Npn \pidgin__info:nV #1#2
    { \msg_info:nnnn {pidgin} {generic} {#1} {#2} }

\msg_new:nnn {pidgin} {nosuchbabelcaption}
    { No~Babel~caption~'#1';~using~'#1' }
\cs_new_protected:Npn \pidgin__warn_nosuchbabelcaption:n #1
    { \msg_warning:nnn {pidgin} {nosuchbabelcaption} {#1}}
\cs_generate_variant:Nn \pidgin__warn_nosuchbabelcaption:n { V }

\msg_new:nnn {pidgin} {missingcrefname}
    { Missing cref name for #1: received '#2' }
\cs_new_protected:Npn \pidgin__warn_missingcrefname:nnn #1#2
    { \msg_warning:nnn {pidgin} {missingcrefname} {#1}}
\cs_generate_variant:Nn \pidgin__warn_missingcrefname:nn { VV }

\str_new:N   \g_pidgin_main_str
\str_new:N   \g_pidgin_base_str


\clist_new:N \g_pidgin_lang_clist
\clist_new:N \g_pidgin_base_clist

\prop_new:N  \g_pidgin_strings_prop

\str_const:Nn \c_pidgin__defaults_en_tl
    {
        listabbreviation      = List~of~Abbreviations ,
        nomenclature          = Nomenclature ,
        %see                   = see ,  % TODO: should be provided in INI file
    }

\cs_new_protected:Npn \pidgin_set_main_lang:n #1
{
    \str_gset:Nn \g_pidgin_main_str {#1}
}
\cs_generate_variant:Nn \pidgin_set_main_lang:n  { V }

\cs_new_protected:Npn \pidgin_set_langs:n #1
{
    \clist_gset:Nn \g_pidgin_lang_clist {#1}
}
\cs_generate_variant:Nn \pidgin_set_langs:n  { V }

\cs_new_protected:Npn \pidgin__load_lang:nn #1#2
{
    \babelprovide [#1] {#2}
}
\cs_generate_variant:Nn \pidgin__load_lang:nn { nV }

% Call after setting language(s), but before loading language-dependent packages
\cs_new_protected:Nn \pidgin_start:
{
    \RequirePackage [
        safe           = none ,
        bidi           = basic ,
        shorthands     = off ,
        showlanguages  ,
        %strings        = unicode ,
        provide*       = * ,        % use babelprovide for all
        \g_pidgin_main_str ,
    ] {babel}
    \clist_map_inline:Nn \g_pidgin_lang_clist
        { \pidgin__load_lang:nn {import} {##1} }
    \selectlanguage {\g_pidgin_main_str}
    \RequirePackage {translations}
    
    \str_gset:Nx \g_pidgin_base_str
        { \baselanguage {\g_pidgin_main_str} }
    
    \clist_gset:Nx \g_pidgin_base_clist
        { \clist_map_function:NN \g_pidgin_lang_clist \baselanguage }

    \PassOptionsToPackage {\g_pidgin_base_str, nospace} {varioref}
    
    \exp_args:NV \SetBabelStrings \c_pidgin__defaults_en_tl
    
    % TODO: remove; replace with translations
    \SetBabelStrings {
        listabbreviation      = List~of~Abbreviations ,
        nomenclature          = Nomenclature ,
        listlisting           = List~of~Source~Codes ,
    }
}

\NewDocumentCommand \OpenPidgin {m}
{
    \pidgin_set_langs:e{#1}
    \pidgin_start:
}

\cs_new:Npn \pidgin_uppercase:n #1
    { \text_uppercase:Vn \g_pidgin_main_str {#1} }

\cs_new:Npn \pidgin_lowercase:n #1
    { \text_lowercase:Vn \g_pidgin_main_str {#1} }

\cs_new:Npn \pidgin_sentencecase:n #1
    { \text_titlecase:Vn  \g_pidgin_main_str {#1} }

\cs_new:Npn \pidgin_sentencecase_first:n #1
    { \text_titlecase_first:Vn \g_pidgin_main_str {#1} }


\NewExpandableDocumentCommand \PidginMainLang {}
    { \g_pidgin_main_str }
\NewExpandableDocumentCommand \PidginMainBase {}
    { \g_pidgin_base_str }


\cs_new_protected:Npn \pidgin__addto:Vn #1#2
{
    \exp_args:Ncn \addto {captions#1} {#2}
}

\cs_new_protected:Npn \pidgin__set_cref_auxi:Nnee #1#2#3#4
{
    #1 {#2} {#3} {#4}
}

\cs_new_protected:Npn \pidgin__set_cref_aux:nVV #1#2#3
{
    % set both \Crefname and \crefname
    % using language-aware casing (via #1 and \pidgin_lowercase:n)
    \pidgin__set_cref_auxi:Nnee
        \Crefname
        {#1}
        { \pidgin_sentencecase_first:n{#2} }
        { \pidgin_sentencecase_first:n{#3} }
    \pidgin__set_cref_auxi:Nnee
        \crefname
        {#1}
        { \pidgin_lowercase:n{#2} }
        { \pidgin_lowercase:n{#3} }
}

\cs_new_protected:Npn \pidgin__set_cref:nn #1#2
{
    \seq_clear:N \l_tmpa_seq
    \tl_clear:N \l_tmpa_tl
    \tl_clear:N \l_tmpb_tl
    \seq_set_split:Nnn \l_tmpa_seq {/} {#2}
    \seq_get_left:NNTF  \l_tmpa_seq \l_tmpa_tl
        {
            \seq_get_right:NNTF \l_tmpa_seq \l_tmpb_tl  % could be the same
                {
                    \pidgin__set_cref_aux:nVV {#1} \l_tmpa_tl \l_tmpb_tl
                }
                { \pidgin__warn_missingcrefname:nn {#1} {#2} }
        }
        { \pidgin__warn_missingcrefname:nn {#1} {#2} }  % shouldn't be possible?
}

\NewDocumentCommand \SetCrefStrings { m }
{
    \prop_set_from_keyval:Nn \l_tmpa_prop {#1}
    \prop_map_inline:Nn \l_tmpa_prop
        { \pidgin__set_cref:nn {##1} {##2} }
}


\cs_new:Npn \pidgin_string:n #1
    { \prop_item:Nn \g_pidgin_strings_prop {#1} }


\NewDocumentCommand \SetTranslationStrings { m }
{
    \prop_set_from_keyval:Nn \l_tmpa_prop {#1}
    \prop_map_inline:Nn \l_tmpa_prop
        { \DeclareTranslation {\g_pidgin_main_str} {##1} {##2} }
}

\NewDocumentCommand \SetBiblatexStrings { m }
{
    \DefineBibliographyStrings {\g_pidgin_main_str} {#1}
}

\NewDocumentCommand \SetBabelStrings { m }
{
    \prop_set_from_keyval:Nn \l_tmpa_prop {#1}
    \prop_map_inline:Nn \l_tmpa_prop
        { \setlocalecaption {\g_pidgin_main_str} {##1} {##2} }
    \prop_map_inline:Nn \l_tmpa_prop
        { \prop_gput:Nnn \g_pidgin_strings_prop {##1} {##2} }
}

\NewDocumentCommand \ProvideTranslations { m m }
{
    \prop_set_from_keyval:Nn \l_tmpa_prop {#2}
    \prop_map_inline:Nn \l_tmpa_prop
        { \ProvideTranslation {#1} {##1} {##2} }
}

\NewDocumentCommand \DeclareTranslations { m m }
{
    \prop_set_from_keyval:Nn \l_tmpa_prop {#2}
    \prop_map_inline:Nn \l_tmpa_prop
        { \DeclareTranslation {#1} {##1} {##2} }
}

\NewDocumentCommand \NewTranslations { m m }
{
    \prop_set_from_keyval:Nn \l_tmpa_prop {#2}
    \prop_map_inline:Nn \l_tmpa_prop
        { \NewTranslation {#1} {##1} {##2} }
}

\NewDocumentCommand \ProvideTranslationFallbacks { m }
{
    \clist_set:Nn \l_tmpa_clist {#1}
    \clist_map_inline:Nn \l_tmpa_clist
    {
        \ProvideTranslationFallback           {##1} {##1}
        \ProvideTranslation         {english} {##1} {##1}
    }
}



\cs_new_protected:Nn \pidgin__load_trans:
{
    \ProvideTranslationFallbacks
    {
        Nomenclature ,
        List~of~Abbreviations ,
    }
    \ProvideTranslations
        { spanish }
        {
            Nomenclature            = Nomenclatura ,
            List~of~Abbreviations   = Lista~de~Abreviaturas ,
        }
    \ProvideTranslations
        { catalan }
        {
            Nomenclature            = Nomenclatura ,
            List~of~Abbreviations   = Llista~d~Abreviatures ,
        }
    \ProvideTranslations
        { croatian }
        {
            Nomenclature            = Nomenklatura ,
            List~of~Abbreviations   = Popis~Kraćenica ,
        }
    \ProvideTranslations
        { danish }
        {
            Nomenclature            = Nomenklatur ,
            List~of~Abbreviations   = Liste~over~Forkortelser ,
        }
    \ProvideTranslations
        { dutch }
        {
            Nomenclature            = Nomenclatuur ,
            List~of~Abbreviations   = Lijst~van~Afkortingen ,
        }
    \ProvideTranslations
        { italian }
        {
            Nomenclature            = Nomenclatura ,
            List~of~Abbreviations   = Elenco~di~Abbreviazioni ,
        }
    \ProvideTranslations
        { norwegian }
        {
            Nomenclature            = Nomenklatur ,
            List~of~Abbreviations   = Liste~over~Forkortelser ,
        }
    \ProvideTranslations
        { swedish }
        {
            Nomenclature            = Nomenklatur ,
            List~of~Abbreviations   = Lista~över~Förkortningar ,
        }
    \ProvideTranslations
        { finnish }
        {
            Nomenclature            = Nimikkeistö ,
            List~of~Abbreviations   = Lyhenteiden~Luettelo ,
        }
    \ProvideTranslations
        { hungarian }
        {
            Nomenclature            = Elnevezéstan ,
            List~of~Abbreviations   = Rövidítések~Listája ,
        }
    \ProvideTranslations
        { slovenian }
        {
            Nomenclature            = Nomenklatura ,
            List~of~Abbreviations   = Seznam~Okrajšav ,
        }
    \ProvideTranslations
        { slovak }
        {
            Nomenclature            = Nomenklatúra ,
            List~of~Abbreviations   = Zoznam~Skratiek ,
        }
    \ProvideTranslations
        { polish }
        {
            Nomenclature            = Nomenklatura ,
            List~of~Abbreviations   = Lista~z~Skrótów ,
        }
    \ProvideTranslations
        { portuguese }
        {
            Nomenclature            = Nomenclatura ,
            List~of~Abbreviations   = Lista~de~Abreviaturas ,
        }
    \ProvideTranslations
        { french }
        {
            Nomenclature            = Nomenclature ,
            List~of~Abbreviations   = Liste~des~Abréviations ,
        }
    \ProvideTranslations
        { german }
        {
            Nomenclature            = Nomenklatur ,
            List~of~Abbreviations   = Liste~der~Abkürzungen ,
        }
    \ProvideTranslations
        { russian }
        {
            Nomenclature            = Номенклатура ,
            List~of~Abbreviations   = Список~сокращений ,
        }
    \ProvideTranslations
        { bulgarian }
        {
            Nomenclature            = Номенклатура ,
            List~of~Abbreviations   = Списък~на~съкращенията ,
        }
    \ProvideTranslations
        { afrikaans }
        {
            Nomenclature            = Nomenklatuur ,
            List~of~Abbreviations   = Lys~van~Afkortings ,
        }
    \ProvideTranslations
        { malay }
        {
            Nomenclature            = Nomenklatur ,
            List~of~Abbreviations   = Senarai~singkatan ,
        }
    \ProvideTranslations
        { turkish }
        {
            Nomenclature            = Isimlendirme ,
            List~of~Abbreviations   = Kısaltmalar~Listesi ,
        }
    \ProvideTranslations
        { greek }
        {
            Nomenclature            = Ονοματολογία ,
            List~of~Abbreviations   = Κατάλογος~συντομογραφιών ,
        }
    % For some reason, translations doesn't provide any Sino-Tibetan languages
    %\ProvideTranslations
    %    { schinese }
    %    {
    %        Nomenclature            = 命名法 ,
    %        List~of~Abbreviations   = 缩略语表 ,
    %    }
}


% TODO: these don't work
\cs_new_protected:Npn \pidgin__get_caption_aux:nVN #1#2#3
{
    \getlocaleproperty* \pidgin@tmpcap {#2} {captions/#1}
    \exp_args:NNe \tl_set:Nn #3 { \pidgin@tmpcap }
}
\cs_new_protected:Npn \pidgin__get_caption:nN #1#2
{
    \pidgin__get_caption_aux:nnN  {#1} \g_pidgin_main_str #2
    \tl_if_empty:VTF #2
        { \pidgin__warn_nosuchbabelcaption:n {#1} }
        { \tl_set:Nn #2 {#1} }
}

\cs_new_protected:Npn \pidgin__get_cref_aux:nN #1#2
{
    \exp_args:NNe
        \tl_set:Nn
        #2
        { \crtcrefname {#1} }
}

\cs_new_protected:Nn \pidgin__nomenclature_internal:
{
    \pidgin__get_cref_aux:nN {page}     \l_pidgin__nom_page_tl
    \pidgin__get_cref_aux:nN {equation} \l_pidgin__nom_eqn_tl
    \def \pagedeclaration ##1
        { , ~ \l_pidgin__nom_page_tl ~ ##1 }
    \def \eqdeclaration ##1
        { , ~ \l_pidgin__nom_eqn_tl ~ ##1 }
    \prop_get:NnNT \g_pidgin_strings_prop {nomenclature} \l_pidgin__nom_nom_tl
        { \def \nomname { \l_pidgin__nom_nom_tl } }
}



% Call after loading all your packages
\cs_new_protected:Nn \pidgin_close:
{
    %\RequirePackage {zref-clever}  % TODO: instead
    \RequirePackage [\g_pidgin_base_str] {cleveref}
    %\RequirePackage [overwrite] {crefthe}
	%\RequirePackage {create-theorem}
    \RequirePackage {crossreftools}
    \cs_if_exist:cT {nomname}
    {
        \hook_gput_code:nnn
            { begindocument / before }
            { pidgin / nomenclature }
            { \pidgin__nomenclature_internal: }
    }
}

\NewDocumentCommand \ClosePidgin {}
    { \pidgin_close: }
