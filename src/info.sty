% Copyright 2022 Douglas Myers-Turnbull
% This work may be distributed and/or modified under the conditions of the
% LaTeX Project Public License, either version 1.3 of this license or
% (at your option) any later version. The latest version of this license is
% in http://www.latex-project.org/lppl.txt and version 1.3 or later is part of
% all distributions of LaTeX version 2005/12/01 or later.


%=======                                                   =======
%=======                       info                        =======
%=======                                                   =======

\NeedsTeXFormat {LaTeX2e} [2020-10-01]
\ExplSyntaxOn
\ProvidesExplPackage {info} {2022-05-30} {0.1.0}
    { Title~pages~from~templates~and~key/value~pairs }

\cs_generate_variant:Nn \seq_use:Nnnn { NVVV }
\cs_generate_variant:Nn \text_titlecase_first:n { V }


\msg_new:nnn {info} {infomissing}
    { No~#1~key~'#2'~is~defined. }
\cs_new_protected:Npn \info__missing_err:nn #1#2
    { \msg_warning:nnn {info} {infomissing} {#1} {#2} }

\msg_new:nnn {info} {infonotdef}
    { #1~key~'#2'~is~not~defined. }
\cs_new_protected:Npn \info__not_def_err:nn #1#2
    { \msg_error:nnnn {info} {infonotdef} {#1} {#2} }
\cs_generate_variant:Nn \info__not_def_err:nn { nV }

\msg_new:nnn {info} {infoisdef}
    { #1~key~'#2'~is~already~defined~(to~'#3'). }
\cs_new_protected:Npn \info__is_def_err:nnn #1#2#3
    { \msg_error:nnnnn {info} {infoisdef} {#1} {#2} }
\cs_generate_variant:Nn \info__is_def_err:nnn { nnV }

\msg_new:nnn {info} {knownxmpdata}
    { Set~XMP~data:~'#1'. }
\cs_new_protected:Npn \info__knownxmpdata_info:n #1
    { \msg_info:nnn {info} {knownxmpdata} {#1} }
\cs_generate_variant:Nn \info__knownxmpdata_info:n { V }

\msg_new:nnn {info} {unknownxmpdata}
    { Set~PDF~info~dictionary~data~(excludes~known~XMP~keys):~'#1'. }
\cs_new_protected:Npn \info__unknownxmpdata_info:n #1
    { \msg_info:nnn {info} {unknownxmpdata} {#1} }
\cs_generate_variant:Nn \info__unknownxmpdata_info:n { V }


\msg_new:nnn {info} {templatenotdef}
    { Title~template~#1~is~not~defined. }
\cs_new_protected:Npn \info__err_template_missing:n #1
    { \msg_info:nnn {info} {templatenotdef} {#1} }

\msg_new:nnn {info} {loadtextiles}
    { Load~package~textiles~to~use~options~'textile'~and~'style'. }
\cs_new_protected:Nn \info_err_load_textiles:
    { \msg_info:nn {info} {loadtextiles} }

%===================================================================
%                    storing and looking up
%===================================================================

\prop_new:N \g_info_prop
\seq_new:N  \g_info_affils_seq
\prop_new:N \g_info_affils_prop
\seq_new:N  \g_info_notes_seq
\prop_new:N \g_info_notes_prop
\prop_new:N \g_info_author_affils_prop
\prop_new:N \g_info_author_notes_prop


\prg_new_conditional:Npnn \info_if_exist:n #1 { T, F, TF }
{
    \prop_if_in:NnTF \g_info_prop {#1}
        { \prg_return_true: }
        { \prg_return_false: }
}

\cs_new_protected:Npn \info_get:nnN #1#2#3
{
    \prop_get:NnNF \g_info_prop {#1} #3
        { \tl_set:Nn #2 {#2} }
}
\cs_generate_variant:Nn \info_get:nnN { VnN }

\cs_new_protected:Npn \info_get:nN #1#2
{
    \prop_get:NnNF \g_info_prop {#1} #2
        {
            \info__missing_err:nn {Info} {#1}
            \tl_set_eq:NN #2 #1  % set value to key
        }
}
\cs_generate_variant:Nn \info_get:nN { VN }


\cs_new_protected:Npn \info_item:n #1
{
    \prop_get:NnNTF \g_info_prop {#1} \l_tmpa_tl
        { \l_tmpa_tl }
        {
            \info__missing_err:nn {Info} {#1}
            #1
        }
}
\cs_generate_variant:Nn \info_item:n { V }


\cs_new_protected:Npn \info_item:nn #1#2
{
    \prop_get:NnNTF \g_info_prop {#1} \l_tmpa_tl
    { \l_tmpa_tl }
    { #2 }
}
\cs_generate_variant:Nn \info_item:nn { Vn }


\NewDocumentCommand \getinfo {m}
{
    \info_item:n {#1}
}


%===================================================================
%                    hyperxmp data
%===================================================================


% hyperxmp notes:
%
% Date: yyyy-mm-ddThh:mm:ss+tt:tt
% DCMI Rendition ("pdfrendition") [default: default]
%    default, draft, lowres, proof, screen, and thumbnail
% DCMI Type Vocabulary (for "pdftype") [default: Text]
%    Collection, Dataset, Event, Image,
%    InteractiveResource, MovingImage, PhysicalObject,
%    Service, Software, Sound, StillImage, and Text
% PRISM aggregation types (for "pubtype"):
%    book, journal, magazine, manual, report, or whitepaper
%    ...  more
% pubstatus:
%    - AO Authorâ€™s Original
%    - SMUR Submitted Manuscript Under Review
%    - AM Accepted Manuscript
%    - P Proof
%    - VoR Version of Record
%    - CVoR Corrected Version of Record
%    - EVoR Enhanced Version of Record

\str_set:Nn \c_info_hyperxmp_str
{
    subject, title, subtitle, keywords,
    type,      % recommended vocabulary above
    author, authortitle,
    captionwriter,  % who wrote the metadata
    lang,      % e.g. en-US
    rendition, % controlled vocabulary
    copyright, licenseurl,
    publication, publisher,
    pubstatus, % e.g. AO  (controlled vocab)
    pubtype,   % e.g. book (controlled vocab)
    baseurl,
    url,
    bookedition,
    volumenum, issuenum,
    doi, eissn, isbn,
    date, creationdate, moddate,  % normally just date is fine
    metadate, metalang,  % metadata language and creation date
    contactaddress, contactcity, contactcountry, contactcountry, contactemail,
    contactphone, contactpostcode, contactregion, contacturl,
    % and these you probably don't normally want to set:
    producer,  % generating software
    documentid, instanceid, versionid,  % PDF concepts; normally leave
    identifier,  % by default uses the FIRST non-empty ID value (e.g. DOI)
    pages, pagerange,  % If your doc starts somewhere else
    aconformance, apart, uapart, xstandard,  % Conformance to PDF standards
    trapped, % color trapping True/False/Unknown
    bytes,   % download time estimation [default: last compile size]
    source,  % [default: .tex source name]
}

% NOTE:
% "hyperxmp implicitly writes a wealth of additional metadata into the xmp packet
% such as the document date, creation date, creator tool, file format, pdf version,
% and unique document and instance IDs"
% So, the user shouldn't set them

\cs_new_protected:Npn \info_split_hyperxmp_data:NN #1#2
{
    \str_clear:N #1
    \str_clear:N #2
    \prop_map_inline:Nn \g_info_prop
    {
        \str_if_in:NnTF \c_info_hyperxmp_str {##1,}
            { \str_put_right:Nn #1 {pdf##1={##2},} }
            { \str_put_right:Nn #2 {##1={##2},} }
    }
}

\cs_new_protected:Npn \info_set_hyper_data: #1
{
    % this variant is more efficient
    \info_split_hyperxmp_data:NN \l__tmp_hyperxmp_str \l__tmp_nonhyperxmp_str
    \info__knownxmpdata_info:V \l__tmp_hyperxmp_str
    \info__unknownxmpdata_info:V \l__tmp_nonhyperxmp_str
    \exp_args:Ne \hypersetup {\l__tmp_hyperxmp_str, \l__tmp_nonhyperxmp_str}
}

\cs_new_protected:Npn \info_set_hyperxmp_data: #1
{
    \info_split_hyperxmp_data:NN \l__tmp_hyperxmp_str \l__tmp_nonhyperxmp_str
    \info__knownxmpdata_info:V \l__tmp_hyperxmp_str
    \exp_args:Ne \hypersetup {\l__tmp_hyperxmp_str}
}

\cs_new_protected:Npn \info_set_non_hyperxmp_data: #1
{
    \info_split_hyperxmp_data:NN \l__tmp_hyperxmp_str \l__tmp_nonhyperxmp_str
    \info__unknownxmpdata_info:V \l__tmp_nonhyperxmp_str
    \exp_args:Ne \hypersetup {\l__tmp_nonhyperxmp_str}
}

\NewDocumentCommand \AddPdfHyperxmpData { }
    { \info_set_hyperxmp_data: }


\NewDocumentCommand \AddPdfDictData { }
    { \info_set_non_hyperxmp_data: }


%===================================================================
%                    setting info
%===================================================================

\cs_new_protected:Npn \info_set_val:nn #1#2
    { \prop_gput:Nnn \g_info_prop {#1} {#2} }
\cs_generate_variant:Nn \info_set_val:nn { nV, VV }

\cs_new_protected:Npn \info_set:n #1
    { \prop_gset_from_keyval:Nn \g_info_prop {#1} }
\cs_generate_variant:Nn \info_set:n { V }
\NewDocumentCommand \SetInfo {m}
    { \info_set:n{#1} }

\cs_new_protected:Npn \info_put:n #1
    { \prop_gput_from_keyval:Nn \g_info_prop {#1}  }
\cs_generate_variant:Nn \info_put:n { V }
\NewDocumentCommand \PutInfo {m}
    { \info_put:n{#1} }

\cs_new_protected:Npn \info_provide:n #1
{
    \prop_set_from_keyval:Nn \l_tmpa_prop {#1}
    \prop_map_inline:Nn \l_tmpa_prop
        { \prop_gput_if_new:Nnn \g_info_prop {##1} {##2} }
}
\cs_generate_variant:Nn \info_provide:n { V }
\NewDocumentCommand \ProvideInfo {m}
    { \info_provide:n{#1} }

\cs_new_protected:Npn \info_new:n #1
{
    \prop_set_from_keyval:Nn \l_tmpa_prop {#1}
    \prop_map_inline:Nn \l_tmpa_prop
    {
        \prop_get:NnNTF \g_info_prop {##1} \l_tmpa_tl
        { \info__is_def_err:nnv {Info} {##1} {\l_tmpa_tl} }
        { \prop_gput_if_new:Nnn \g_info_prop {##1} {##2} }
    }
}
\cs_generate_variant:Nn \info_new:n { V }
\NewDocumentCommand \NewInfo {m}
    { \info_new:n{#1} }

\cs_new_protected:Npn \info_renew:n #1
{
    \prop_set_from_keyval:Nn \l_tmpa_prop {#1}
    \prop_map_inline:Nn \l_tmpa_prop
    {
        \prop_get:NnNTF \g_info_prop {##1} \l_tmpa_tl
        { \prop_gput:Nnn \g_info_prop {##1} {##2} }
        { \info__not_def_err:nn {Info} {#1} }
    }
}
\cs_generate_variant:Nn \info_renew:n { V }
\NewDocumentCommand \RenewInfo {m}
    { \info_renew:n{#1} }

\cs_new_protected:Npn \info_remove:n #1
{
    \clist_set:Nn \l_tmpa_clist {#1}
    \clist_map_inline:Nn \l_tmpa_clist
        { \prop_remove:Nn \g_info_prop {##1} }
}
\cs_generate_variant:Nn \info_remove:n { V }
\NewDocumentCommand \RemoveInfo {m}
    { \info_remove:n{#1} }



%===================================================================
%                    formatting single info
%===================================================================

\cs_new_protected:Npn \info__textile:NNN #1#2#3
{
    % needs TexLive 2022+
    %\bool_if_p:nTF
    %{
    %  (
    %    !(\tl_if_blank_p:V #1)
    %    || (!\tl_if_blank_p:V #2)
    %  )
    %  && (!\tl_if_blank_p:V #3)
    %}
    \bool_set_false:N \l_tmpa_bool
    \tl_if_blank:VF #1 { \bool_set_true:N \l_tmpa_bool }
    \tl_if_blank:VF #2 { \bool_set_true:N \l_tmpa_bool }
    \tl_if_blank:VT #3 { \bool_set_false:N \l_tmpa_bool }
    \bool_if:NTF \l_tmpa_bool
    {
        \cs_if_exist:cTF {textiles_use:nn}
        { \textiles_use_or_inline:VVV #1 #2 #3 }
        { \info_err_load_textiles: }
    }
    { #3 }
}

\keys_define:nn { info / single }
{
    pre .tl_set:N                = \l_pre_tl ,
    pre .initial:n               = {} ,
    pre .value_required:n        = true ,
    post .tl_set:N               = \l_post_tl ,
    post .initial:n              = {} ,
    post .value_required:n       = true ,
    textile .tl_set:N            = \l_textile_tl ,
    textile .initial:n           = {} ,
    textile .value_required:n    = true ,
    style .tl_set:N              = \l_style_tl ,
    style .initial:n             = {} ,
    style .value_required:n      = true ,
    if-blank .tl_set:N           = \l_if_blank_tl ,
    if-blank .initial:n          = {} ,
    if-blank .value_required:n   = true ,
}

\cs_new_protected:Npn \info__format_single:n #1
{
    \str_set:Nn \l_my_str {#1}
    \tl_if_empty:NTF \l_my_str
    {
        \str_set_eq:NN \l_my_str \l_if_blank_tl
    }
    {
        \str_put_left:NV \l_my_str \l_pre_tl
        \str_put_right:NV \l_my_str \l_post_tl
    }
    \info__textile:NNN \l_textile_tl \l_style_tl \l_my_str
}
\cs_generate_variant:Nn \info__format_single:n { V, e }

\NewDocumentCommand \info { >{\TrimSpaces}m O{} }
{
    \group_begin:
    \keys_set:nn {info / single} {#2}
    \info_get:nN {#1} \l_my_str
    \info__format_single:V \l_my_str
    \group_end:
}

\cs_new_protected:Npn \info__titlecase_first:V #1
{
    \cs_if_exist:cTF {pidgin_sentencecase_first:n}
        { \pidgin_sentencecase_first:n{#1} }
        { \text_titlecase_first:n{#1} }
}

\NewDocumentCommand \Info { >{\TrimSpaces}m O{} }
{
    \group_begin:
    \keys_set:nn {info / single} {#2}
    \info_get:nN {#1} \l_my_str
    \tl_set:Ne \l_tmpa_tl { \text_titlecase_first:V \l_my_str }
    \info__format_single:V \l_tmpa_tl
    \group_end:
}

\NewDocumentCommand \InfoInline { >{\TrimSpaces}m O{} }
{
    \prop_gput:Nnn \g_info_prop {__info__tmp__} {#1}
    \group_begin:
    \keys_set:nn {info / single} {#2}
    \info_get:nN {#1} \l_my_str
    \info__format_single:V \l_my_str
    \group_end:
    \prop_remove:Nn \g_info_prop {__info__tmp__}
}



%===================================================================
%                    formatting list info
%===================================================================

\keys_define:nn { info / list }
{
    pre-item .tl_set:N               = \l_pre_tl ,
    pre-item .initial:n              = {} ,
    pre-item .value_required:n       = true ,
    post-item .tl_set:N              = \l_post_tl ,
    post-item .initial:n             = {} ,
    post-item .value_required:n      = true ,
    item-textile .tl_set:N           = \l_textile_tl ,
    item-textile .initial:n          = {} ,
    item-textile .value_required:n   = true ,
    item-style .tl_set:N             = \l_style_tl ,
    item-style .initial:n            = {} ,
    item-style .value_required:n     = true ,
    textile .tl_set:N                = \l_list_textile_tl ,
    textile .initial:n               = {} ,
    textile .value_required:n        = true ,
    style .tl_set:N                  = \l_list_style_tl ,
    style .initial:n                 = {} ,
    style .value_required:n         = true ,
    sep .tl_set:N                    = \l_list_sep_tl ,
    sep .initial:n                   = {,~} ,
    sep .value_required:n            = true ,
    sep-two .tl_set:N                = \l_list_sep_two_tl ,
    sep-two .default:n               = {~and~} ,
    sep-two .initial:n               = {,~} ,
    sep-last .tl_set:N               = \l_list_sep_last_tl ,
    sep-last .default:n              = {,~and~} ,
    sep-last .initial:n              = {,~} ,
    pre .tl_set:N                    = \l_list_pre_tl ,
    pre .initial:n                   = {} ,
    pre .value_required:n            = true ,
    post .tl_set:N                   = \l_list_post_tl ,
    post .initial:n                  = {} ,
    post .value_required:n           = true ,
    if-blank .tl_set:N               = \l_list_if_blank_tl ,
    if-blank .initial:n              = {} ,
    if-blank .value_required:n       = true ,
    affils-first .bool_set:N         = \l_affils_first_bool ,
    affils-first .default:n          = true ,
    affils-first .initial:n          = false ,
}


\cs_new_protected:Npn \info__format_list:N #1
{
    \tl_clear:N \l_if_blank_tl  % would be weird
    \seq_set_map:NNn \l_my_mapped_seq #1 { \info__format_single:n{##1} }
    \tl_set:Nn \l_my_rendered_list_tl
    {
        \seq_use:NVVV
            \l_my_mapped_seq
            \l_list_sep_two_tl
            \l_list_sep_tl
            \l_list_sep_last_tl
    }
    \tl_if_empty:NTF \l_my_rendered_list_tl
    {
        \str_set_eq:NN \l_my_rendered_list_tl \l_list_if_blank_tl
    }
    {
        \str_put_left:NV \l_my_rendered_list_tl \l_list_pre_tl
        \str_put_right:NV \l_my_rendered_list_tl \l_list_post_tl
    }
    \info__textile:NNN \l_list_textile_tl \l_list_style_tl \l_my_rendered_list_tl
}
\cs_generate_variant:Nn \info__format_list:n { V, e }

\NewExpandableDocumentCommand \AllInfo {}
{
    \prop_to_keyval:N \g_info_prop
}

\NewDocumentCommand \infolist { >{\TrimSpaces}m O{} }
{
    \group_begin:
    \keys_set:nn {info / list} {#2}
    \info_get:nN {#1} \l_tmpa_tl
    \clist_set:NV \l_tmpa_clist \l_tmpa_tl
    \seq_set_from_clist:NN \l_tmpa_seq \l_tmpa_clist
    \info__format_list:N \l_tmpa_seq
    \group_end:
}

\NewDocumentCommand \InfoList { >{\TrimSpaces}m O{} }
{
    \group_begin:
    \keys_set:nn {info / list} {#2}
    \info_get:nN {#1} \l_tmpa_tl
    \tl_set:Ne \l_tmpa_tl { \text_titlecase_first:V \l_tmpa_tl }
    \clist_set:NV \l_tmpa_clist \l_tmpa_tl
    \seq_set_from_clist:NN \l_tmpa_seq \l_tmpa_clist
    \info__format_list:N \l_tmpa_seq
    \group_end:
}
\NewDocumentCommand \Infolist { >{\TrimSpaces}m O{} }
    { \InfoList {#1} [#2] }

\NewDocumentCommand \InfoListInline { >{\TrimSpaces}m O{} }
{
    \prop_gput:Nnn \g_info_prop {__info__tmp__} {#1}
    \group_begin:
    \keys_set:nn {info / list} {#2}
    \info_get:nN {#1} \l_tmpa_tl
    \clist_set:NV \l_tmpa_clist \l_tmpa_tl
    \seq_set_from_clist:NN \l_tmpa_seq \l_tmpa_clist
    \info__format_list:N \l_tmpa_seq
    \group_end:
    \prop_remove:Nn \g_info_prop {__info__tmp__}
}

%===================================================================
%                    add authors
%===================================================================

\cs_new_protected:Npn \info_new_special:n #1
{
    \prop_new:c {\g_info_#1_prop}
    \seq_new:c {\g_info_#1_seq}
}

\cs_new_protected:Npn \info__extract_special:nNN #1#2#3
{
    
    \prop_gset_from_keyval:cn {\g_info_#1_prop} {#1}
    \clist_set:Nn \l_tmpa_clist {#1}
    \clist_map_inline:Nn \l_tmpa_clist
    {
        \regex_split:nnN {=} {##1} \l_tmpa_tl
        \seq_gput_right:NV \g_info_affils_seq #3
    }
}
\cs_generate_variant:Nn \info__extract_special:nNN { ncc }

\cs_new_protected:Npn \info_set_special:nn #1#2
{
    \info__extract_special:ncc {#1} {\g_info_#1_prop} {\g_info_#1_seq}
}

\NewDocumentCommand \SetAffils { m }
{
    \info_set_special:nn {affils} {#1}
}

\NewDocumentCommand \SetNotes { m }
{
    \info_set_special:nn {notes} {#1}
}

\NewDocumentCommand \SetAuthors { m }
{
    \prop_set:Nn \l__affils_prop {}
    \prop_set:Nn \l__notes_prop {}
    \info__extract_special:nNN \l_tmpa_prop \l_tmpa_seq
    \prop_map_inline:Nn \l_tmpa_prop
    {
        \clist_set:Nn \l_tmpa_clist {##2}
        \clist_map_inline:Nn \l_tmpa_clist
        {
            % TODO: check both and neither
            \prop_if_in:NnT \g_info_affils_prop {###1}
                { \prop_put:Nnn \l__affils_prop {###1} }
            \prop_if_in:NnT \g_info_notes_prop {##1} {###1}
                { \prop_put:Nnn \l__notes_prop {##1} {###1} }
        }
    }
    \info_set_val:ne {author} { \seq_use:Nn \l_tmpa_seq {,} }
    \prop_set_eq:NN \g_info_author_affils_prop \l__affils_prop
    \prop_set_eq:NN \g_info_author_notes_prop \l__notes_prop
}

\keys_define:nn { info / set-author-data }
{
    authors .tl_set:N          = \l_authors_tl,
    authors .initial:n         = {},
    authors .value_required:n  = true ,
    affils .tl_set:N           = \l_affils_tl,
    affils .initial:n          = {},
    affils .value_required:n   = true ,
    notes .tl_set:N            = \l_notes_tl,
    notes .initial:n           = {},
    notes .value_required:n    = true ,
}

\NewDocumentCommand \AuthorList { O{} }
{

}

\NewDocumentCommand \AffilList { O{} }
{

}
\NewDocumentCommand \NoteList { O{} }
{

}



%===================================================================
%                    shorthands for common info
%===================================================================

\NewDocumentCommand \gettitle { O{} }
    { \info{title}[#1] }

\NewDocumentCommand \GetTitle { O{} }
    { \Info{title}[#1] }

\NewDocumentCommand \getsubject { O{} }
    { \info{subject}[#1] }

\NewDocumentCommand \GetProducer { O{} }
    { \Info{producer}[#1] }

\NewDocumentCommand \getproducer { O{} }
    { \info{producer}[#1] }

\NewDocumentCommand \GetSubject { O{} }
    { \Info{subject}[#1] }

\NewDocumentCommand \getplaindate { O{} }
    { \info{plaindate}[#1] }

\NewDocumentCommand \GetPlainDate { O{} }
    { \Info{plaindate}[#1] }

\NewDocumentCommand \getauthor { O{} }
    { \info{author}[#1] }

\NewDocumentCommand \GetAuthor { O{} }
    { \Info{author}[#1] }

\NewDocumentCommand \getauthors { O{} }
    { \infolist{author}[#1] }

\NewDocumentCommand \GetAuthors { O{} }
    { \InfoList{author}[#1] }

\NewDocumentCommand \getkeywords { O{} }
    { \infolist{keywords}[#1] }

\NewDocumentCommand \GetKeywords { O{} }
    { \InfoList{keywords}[#1] }

